{"version":3,"sources":["logo.svg","serviceWorker.js","Country.js","Country1.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Component","Country1","useState","country","setCountry","search","setSearch","useEffect","a","axios","get","data","fetchData","filteredCountry","filter","countries","name","toLowerCase","includes","className","placeholder","input","onChange","e","target","value","map","element","index","key","capital","nativeName","population","src","flag","alt","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,sJCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uDCf+BC,Y,8BC0DtBC,EAzDE,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACdC,EADc,KACLC,EADK,OAEOF,mBAAS,IAFhB,mBAEdG,EAFc,KAENC,EAFM,KAIrBC,qBAAU,WAMR,OALe,uCAAG,8BAAAC,EAAA,sEACOC,IAAMC,IAAI,wCADjB,gBACRC,EADQ,EACRA,KACRP,EAAWO,GAFK,2CAAH,oDAIfC,GACO,eAGN,IAEH,IAAMC,EAAkBV,EAAQW,QAAO,SAACC,GACtC,OAAOA,EAAUC,KAAKC,cAAcC,SAASb,EAAOY,kBAGtD,OACE,yBAAKE,UAAU,OACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,QACb,2BACEA,UAAU,SACVC,YAAY,SACZC,MAAM,OACNC,SAAU,SAACC,GAAD,OAAOjB,EAAUiB,EAAEC,OAAOC,UAErCZ,EAAgBa,KAAI,SAACC,EAASC,GAAV,OACnB,yBAAKC,IAAKD,EAAOT,UAAU,OACzB,yBAAKA,UAAU,OACb,2BAAIS,EAAQ,IAEd,yBAAKT,UAAU,OACb,2BAAIQ,EAAQX,OAEd,yBAAKG,UAAU,OACb,2BAAIQ,EAAQG,UAEd,yBAAKX,UAAU,OACb,2BAAIQ,EAAQI,aAEd,yBAAKZ,UAAU,OACb,2BAAIQ,EAAQK,aAEd,yBAAKb,UAAU,OACb,yBAAKc,IAAKN,EAAQO,KAAMC,IAAI,cC3C5CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SHuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ec397726.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class Country extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      arr: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://restcountries.eu/rest/v2/all\")\r\n      .then((posRes) => {\r\n        this.setState({\r\n          arr: posRes.data,\r\n        });\r\n      })\r\n      .catch((errRes) => {\r\n        console.log(errRes);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>SNO</th>\r\n              <th>Name</th>\r\n              <th>Capital</th>\r\n              <th>Native Name</th>\r\n              <th>Population</th>\r\n              <th>Flag</th>\r\n            </tr>\r\n          </thead>\r\n        </table>\r\n        <tbody>\r\n          {this.state.arr.map((element, index) => (\r\n            <tr key={index}>\r\n              <td>{index + 1}</td>\r\n              <td>{element.name}</td>\r\n              <td>{element.capital}</td>\r\n              <td>{element.nativeName}</td>\r\n              <td> {element.population}</td>\r\n              <td>\r\n                <img src={element.flag} alt=\"\" width=\"100px\" height=\"50px\" />\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\n\r\nconst Country1 = () => {\r\n  const [country, setCountry] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { data } = await axios.get(\"https://restcountries.eu/rest/v2/all\");\r\n      setCountry(data);\r\n    };\r\n    fetchData();\r\n    return () => {\r\n      // cleanup\r\n    };\r\n  }, []);\r\n\r\n  const filteredCountry = country.filter((countries) => {\r\n    return countries.name.toLowerCase().includes(search.toLowerCase());\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"row\">\r\n        <div className=\"full\">\r\n          <input\r\n            className=\"search\"\r\n            placeholder=\"search\"\r\n            input=\"text\"\r\n            onChange={(e) => setSearch(e.target.value)}\r\n          />\r\n          {filteredCountry.map((element, index) => (\r\n            <div key={index} className=\"con\">\r\n              <div className=\"tex\">\r\n                <p>{index + 1}</p>\r\n              </div>\r\n              <div className=\"tex\">\r\n                <p>{element.name}</p>\r\n              </div>\r\n              <div className=\"tex\">\r\n                <p>{element.capital}</p>\r\n              </div>\r\n              <div className=\"tex\">\r\n                <p>{element.nativeName}</p>\r\n              </div>\r\n              <div className=\"tex\">\r\n                <p>{element.population}</p>\r\n              </div>\r\n              <div className=\"tex\">\r\n                <img src={element.flag} alt=\"\" />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Country1;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Country from \"./Country\";\nimport Country1 from \"./Country1\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Country1 />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}